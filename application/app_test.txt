package application

import (
	"log"
	"testing"

	"github.com/Lukmanern/gost/domain/model"
	"github.com/Lukmanern/gost/internal/env"
	"github.com/Lukmanern/gost/internal/helper"
	rbacService "github.com/Lukmanern/gost/service/rbac"
	service "github.com/Lukmanern/gost/service/user"
	"github.com/gofiber/fiber/v2"
)

var (
	appUrl string
	c      *fiber.Ctx
)

func init() {
	env.ReadConfig("./../.env")
	config := env.Configuration()
	appUrl = config.AppUrl
	c = helper.NewFiberCtx()
}

func createUserAndToken(roleID int) (int, string) {
	permissionService := rbacService.NewPermissionService()
	roleService := rbacService.NewRoleService(permissionService)
	userService := service.NewUserService(roleService)

	userID, regisErr := userService.Register(c.Context(), model.UserRegister{
		Name:     helper.RandomString(10),
		Email:    helper.RandomEmails(1)[0],
		Password: helper.RandomString(10),
		RoleID:   roleID,
	})
	if regisErr != nil {
		log.Fatalf("\n\nfailed create user, error: %v\n", regisErr)
	}
	userService.MyProfile(c.Context(), userID)
	userService.Verification(c.Context(), "")

	return 0, ""
}

func TestCreateDeleteUser(t *testing.T) {
	defer func() {
		if r := recover(); r != nil {
			t.Errorf("Panic happened in %s: %v\n\n", "TestCreateUser", r)
		}
	}()

	createUserAndToken(9)
}
